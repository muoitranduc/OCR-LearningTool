<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="openFileDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>157, 17</value>
  </metadata>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>157, 17</value>
  </metadata>
  <data name="label3.ToolTip" xml:space="preserve">
    <value>Sometimes you want to merge two near blobs
that do not intersect, in order to do this those
blobs have to be enlarged so they will intersect
and get merged. This value controls the amount
of pixels each blob will get enlarged.</value>
  </data>
  <data name="btnExport.ToolTip" xml:space="preserve">
    <value>Export the blobs into a matrix where each row is
the blob picture and the last column is the blob
row index (this should match a specific letter).
The exported blobs are from the currently
displayed image (i.e grayscale or binarized).</value>
  </data>
  <data name="label9.ToolTip" xml:space="preserve">
    <value>Each letter is extracted into a square image, so
often it is needed to extend the letter's blob, this
controls the color that will be used as the background
for the added area. If you click on any place on the 
image a sample color will be put here, so the newly
backgournd color will match the existsing picture
background color.</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAQAUAAAAAAAAAAAAAAAEAAAAB
        AAABBAcAEkqMAB555gAggfQALIf0ACuH9ACDuPgA7PT+ADmP9QAkg/QAibz5AMng/AAqgegAE06TAAEF
        CQASSooAIIP0ACyD6AC8vscArr/XAPX5/gB7tvgAtdb7ACOF9ACPwfkA2ur9AI3A+QC/3PwAE0+TAB16
        4QAghfUANYbiANvY2ADkxq0A0cCzACmK9QCTxPoA6PL9AIK7+QC11/sAHn/rAB+D7wAgh/UAWJvkAM+b
        bQDGhk8A1LadAHi29wCt0/sAIYj1AKDM+gDU5/0AJYr1AB+F7wAgifUAnMv6APr08ADRnnIAj4eFAKrP
        9QDi7/0Ag775AKrS+wC62vsAHofvAB+L9QAijfUA6vT+AP///wD8+PYA1KV9ANKhdwDG2u8AIIz1ALHW
        +wDJ4/wAlsn6AKPQ+wAeifAAH432AF+u+AD0+/cA/fv6ANitiQDOl2gAz9nkAIjD+gCezvsAHovwAB+P
        9gCx2PsA3/PmALblxQC55sgA2PHgAPb79wDdt5YAvIhcAESN0ADB4PwAu938AB6O8AArl/YA9vr+AOj2
        7ADK7NUAuOXHAKXftwDi9OgA4cGkAMCGVADp1sUAn9D7AB+S9gAekPEAdLz6AP7+/gDRnXEA27KQAP79
        /QD3/PkAyevUAPr9+wDmy7MAxoZQANqxjgCGrM0AH5T2AB+U9wAgk/EAxuT8APnz7QDr1MEA8ODRAOzW
        xADQnG8A7tvKAOvVwgD27eUA9+7nAHedvAAhl/cARqXxAP3+/gDjxKkA6M64APjx6gDz5doA8uPXALXJ
        2gDUvqoAY6PXADCd9wBSqfEA1ev9APDf0ADs18YA9/DpANOidwD6/P4Az+j8APj8/gBXr/cAYbP3AKnW
        +wBDpvcASJ3iAE+r9gBpt/cAqdb6AOjz/QD8+fcA9uzkAL/g+wDr9f4AxOP8AJXM+QCc0PoAaLb3AHzA
        +ABLpOwAM2KJAF6x9gBfsvYAhcT4AMDg+wD0+f4Ay+b8AIPD9wBktPYAi8f4AGCy9gA3aZMAAgQFADxn
        iwBnrOYAbbb0AG+39ABssOgAP2yRAAMFBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAECAwQFBgcICQMKCwwNDg8QERITFBUWFxgZGhsQEBwdHh8gISIjJCUmJx4eHh4oKSoqKywt
        Li8wMTIzNDEqKjU2Njc4OS06Ozw9PjY+PzZAQUJDREVGLUdISUpLTE1BTk9QRFFEUlMtVFVWV09PT1hZ
        WltcXV5fYC1hYmNkWVllZmdEaGlqa2xtLW5vcHFxcnN0dXZ3eHl6RHt8fX5/gIGCg4SFhoeIREREiYqL
        jI2Oj5CRkpMtlERERESVlpeYmZp3m5ydnnSfoKGPoqOkpaanqKmqq6xEra6vsLGys7S1tra2t7i5urm7
        vLa9vr/AwcLDxMTExMXFxMTExMbHyAAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA
        //8AAP//AAD//wAA//8AAP//AAD//wAA//8=
</value>
  </data>
</root>